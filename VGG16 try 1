{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0aedd096",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:15.365392Z",
     "iopub.status.busy": "2022-11-02T08:40:15.364839Z",
     "iopub.status.idle": "2022-11-02T08:40:19.817209Z",
     "shell.execute_reply": "2022-11-02T08:40:19.816153Z"
    },
    "papermill": {
     "duration": 4.462406,
     "end_time": "2022-11-02T08:40:19.819987",
     "exception": false,
     "start_time": "2022-11-02T08:40:15.357581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from keras.layers import Input, Lambda, Dense, Flatten\n",
    "from keras.models import Model \n",
    "from keras.applications.vgg16 import VGG16\n",
    "from keras.applications.vgg16 import preprocess_input\n",
    "from keras.preprocessing import image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "af71a7fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:19.831183Z",
     "iopub.status.busy": "2022-11-02T08:40:19.829496Z",
     "iopub.status.idle": "2022-11-02T08:40:19.834871Z",
     "shell.execute_reply": "2022-11-02T08:40:19.833956Z"
    },
    "papermill": {
     "duration": 0.01243,
     "end_time": "2022-11-02T08:40:19.836859",
     "exception": false,
     "start_time": "2022-11-02T08:40:19.824429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "IMAGE_SIZE = [224, 224]\n",
    "TRAIN_PATH = \"../input/clean-data/content/data/train\"\n",
    "VAL_PATH = \"../input/clean-data/content/data/val\"\n",
    "TEST_PATH = \"../input/clean-data/content/data/test\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "813f99fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:19.846362Z",
     "iopub.status.busy": "2022-11-02T08:40:19.846093Z",
     "iopub.status.idle": "2022-11-02T08:40:19.850788Z",
     "shell.execute_reply": "2022-11-02T08:40:19.849766Z"
    },
    "papermill": {
     "duration": 0.011904,
     "end_time": "2022-11-02T08:40:19.853043",
     "exception": false,
     "start_time": "2022-11-02T08:40:19.841139",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "import os \n",
    "from IPython.display import display\n",
    "from IPython.display import Image as _Imgdis\n",
    "folder = TRAIN_PATH + '/infected'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "61d8ecb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:19.862385Z",
     "iopub.status.busy": "2022-11-02T08:40:19.862126Z",
     "iopub.status.idle": "2022-11-02T08:40:26.170475Z",
     "shell.execute_reply": "2022-11-02T08:40:26.169419Z"
    },
    "papermill": {
     "duration": 6.316083,
     "end_time": "2022-11-02T08:40:26.173140",
     "exception": false,
     "start_time": "2022-11-02T08:40:19.857057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-11-02 08:40:19.970472: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-11-02 08:40:20.064678: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-11-02 08:40:20.065866: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-11-02 08:40:20.067452: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2022-11-02 08:40:20.072820: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-11-02 08:40:20.074069: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-11-02 08:40:20.075069: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-11-02 08:40:21.879888: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-11-02 08:40:21.880693: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-11-02 08:40:21.881407: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-11-02 08:40:21.882046: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15401 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n",
      "58892288/58889256 [==============================] - 3s 0us/step\n",
      "58900480/58889256 [==============================] - 3s 0us/step\n"
     ]
    }
   ],
   "source": [
    "vgg = VGG16(input_shape = IMAGE_SIZE + [3], weights = \"imagenet\", include_top = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "620aa9c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:26.188855Z",
     "iopub.status.busy": "2022-11-02T08:40:26.188523Z",
     "iopub.status.idle": "2022-11-02T08:40:26.196279Z",
     "shell.execute_reply": "2022-11-02T08:40:26.195341Z"
    },
    "papermill": {
     "duration": 0.017845,
     "end_time": "2022-11-02T08:40:26.198300",
     "exception": false,
     "start_time": "2022-11-02T08:40:26.180455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<KerasTensor: shape=(None, 224, 224, 3) dtype=float32 (created by layer 'input_1')>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vgg.input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "085af1cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:26.214342Z",
     "iopub.status.busy": "2022-11-02T08:40:26.213440Z",
     "iopub.status.idle": "2022-11-02T08:40:26.219059Z",
     "shell.execute_reply": "2022-11-02T08:40:26.218201Z"
    },
    "papermill": {
     "duration": 0.015697,
     "end_time": "2022-11-02T08:40:26.221088",
     "exception": false,
     "start_time": "2022-11-02T08:40:26.205391",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for layer in vgg.layers:\n",
    "    layer.trainable = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0c609ee5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:26.236587Z",
     "iopub.status.busy": "2022-11-02T08:40:26.235803Z",
     "iopub.status.idle": "2022-11-02T08:40:26.253505Z",
     "shell.execute_reply": "2022-11-02T08:40:26.251988Z"
    },
    "papermill": {
     "duration": 0.028051,
     "end_time": "2022-11-02T08:40:26.256035",
     "exception": false,
     "start_time": "2022-11-02T08:40:26.227984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "import glob\n",
    "folders = glob.glob('../input/clean-data/content/data/train/*')\n",
    "print(len(folders))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "25780f47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:26.272925Z",
     "iopub.status.busy": "2022-11-02T08:40:26.271462Z",
     "iopub.status.idle": "2022-11-02T08:40:26.294913Z",
     "shell.execute_reply": "2022-11-02T08:40:26.293927Z"
    },
    "papermill": {
     "duration": 0.033962,
     "end_time": "2022-11-02T08:40:26.297444",
     "exception": false,
     "start_time": "2022-11-02T08:40:26.263482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input_1 (InputLayer)         [(None, 224, 224, 3)]     0         \n",
      "_________________________________________________________________\n",
      "block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n",
      "_________________________________________________________________\n",
      "block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n",
      "_________________________________________________________________\n",
      "block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n",
      "_________________________________________________________________\n",
      "block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n",
      "_________________________________________________________________\n",
      "block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n",
      "_________________________________________________________________\n",
      "block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n",
      "_________________________________________________________________\n",
      "block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n",
      "_________________________________________________________________\n",
      "block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n",
      "_________________________________________________________________\n",
      "block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n",
      "_________________________________________________________________\n",
      "block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n",
      "_________________________________________________________________\n",
      "block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 25088)             0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 2)                 50178     \n",
      "=================================================================\n",
      "Total params: 14,764,866\n",
      "Trainable params: 50,178\n",
      "Non-trainable params: 14,714,688\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "x = Flatten()(vgg.output)\n",
    "prediction = Dense(len(folders), activation = 'softmax')(x)\n",
    "model = Model(inputs = vgg.input, outputs = prediction)\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9e464444",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:26.314450Z",
     "iopub.status.busy": "2022-11-02T08:40:26.314177Z",
     "iopub.status.idle": "2022-11-02T08:40:26.751186Z",
     "shell.execute_reply": "2022-11-02T08:40:26.750162Z"
    },
    "papermill": {
     "duration": 0.448667,
     "end_time": "2022-11-02T08:40:26.753979",
     "exception": false,
     "start_time": "2022-11-02T08:40:26.305312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "adam = tf.keras.optimizers.Adam()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bfff3543",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:26.769883Z",
     "iopub.status.busy": "2022-11-02T08:40:26.769562Z",
     "iopub.status.idle": "2022-11-02T08:40:26.782161Z",
     "shell.execute_reply": "2022-11-02T08:40:26.781280Z"
    },
    "papermill": {
     "duration": 0.022932,
     "end_time": "2022-11-02T08:40:26.784293",
     "exception": false,
     "start_time": "2022-11-02T08:40:26.761361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.compile(loss=\"binary_crossentropy\",\n",
    "             optimizer = adam,\n",
    "             metrics = ['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e41389ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:26.799528Z",
     "iopub.status.busy": "2022-11-02T08:40:26.799248Z",
     "iopub.status.idle": "2022-11-02T08:40:26.803778Z",
     "shell.execute_reply": "2022-11-02T08:40:26.802824Z"
    },
    "papermill": {
     "duration": 0.014475,
     "end_time": "2022-11-02T08:40:26.805702",
     "exception": false,
     "start_time": "2022-11-02T08:40:26.791227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n",
    "preprocessing_function = preprocess_input,\n",
    "rotation_range = 40,\n",
    "width_shift_range = 0.2,\n",
    "height_shift_range = 0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3c876c94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:26.821282Z",
     "iopub.status.busy": "2022-11-02T08:40:26.820531Z",
     "iopub.status.idle": "2022-11-02T08:40:27.290664Z",
     "shell.execute_reply": "2022-11-02T08:40:27.289457Z"
    },
    "papermill": {
     "duration": 0.480599,
     "end_time": "2022-11-02T08:40:27.293376",
     "exception": false,
     "start_time": "2022-11-02T08:40:26.812777",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 1924 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "train_set = datagen.flow_from_directory(TRAIN_PATH, \n",
    "                                        target_size = (224,224),\n",
    "                                       batch_size = 32, \n",
    "                                       class_mode = \"categorical\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f81739bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:27.309924Z",
     "iopub.status.busy": "2022-11-02T08:40:27.309081Z",
     "iopub.status.idle": "2022-11-02T08:40:27.539480Z",
     "shell.execute_reply": "2022-11-02T08:40:27.537464Z"
    },
    "papermill": {
     "duration": 0.240902,
     "end_time": "2022-11-02T08:40:27.541733",
     "exception": false,
     "start_time": "2022-11-02T08:40:27.300831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 1536 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "val_set = datagen.flow_from_directory(VAL_PATH, \n",
    "                                        target_size = (224,224),\n",
    "                                       batch_size = 32, \n",
    "                                       class_mode = \"categorical\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "44645fea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:27.557488Z",
     "iopub.status.busy": "2022-11-02T08:40:27.557193Z",
     "iopub.status.idle": "2022-11-02T08:40:27.665595Z",
     "shell.execute_reply": "2022-11-02T08:40:27.664666Z"
    },
    "papermill": {
     "duration": 0.118499,
     "end_time": "2022-11-02T08:40:27.667625",
     "exception": false,
     "start_time": "2022-11-02T08:40:27.549126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 386 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "test_set = datagen.flow_from_directory(TEST_PATH, \n",
    "                                        target_size = (224,224),\n",
    "                                       batch_size = 32, \n",
    "                                       class_mode = \"categorical\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5e00a936",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:27.683716Z",
     "iopub.status.busy": "2022-11-02T08:40:27.682912Z",
     "iopub.status.idle": "2022-11-02T08:40:27.688260Z",
     "shell.execute_reply": "2022-11-02T08:40:27.687408Z"
    },
    "papermill": {
     "duration": 0.015353,
     "end_time": "2022-11-02T08:40:27.690188",
     "exception": false,
     "start_time": "2022-11-02T08:40:27.674835",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "from keras.callbacks import ModelCheckpoint\n",
    "checkpoint = ModelCheckpoint(filepath = 'mymodel.h5',\n",
    "                            verbose=2, save_best_only = True)\n",
    "\n",
    "callbacks = [checkpoint]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ddb4613d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:27.706131Z",
     "iopub.status.busy": "2022-11-02T08:40:27.705424Z",
     "iopub.status.idle": "2022-11-02T08:40:27.709577Z",
     "shell.execute_reply": "2022-11-02T08:40:27.708592Z"
    },
    "papermill": {
     "duration": 0.014173,
     "end_time": "2022-11-02T08:40:27.711530",
     "exception": false,
     "start_time": "2022-11-02T08:40:27.697357",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "start = datetime.now()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "840c3434",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:40:27.728042Z",
     "iopub.status.busy": "2022-11-02T08:40:27.726595Z",
     "iopub.status.idle": "2022-11-02T08:44:11.958087Z",
     "shell.execute_reply": "2022-11-02T08:44:11.956673Z"
    },
    "papermill": {
     "duration": 224.241746,
     "end_time": "2022-11-02T08:44:11.960407",
     "exception": false,
     "start_time": "2022-11-02T08:40:27.718661",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/keras/engine/training.py:1972: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
      "  warnings.warn('`Model.fit_generator` is deprecated and '\n",
      "2022-11-02 08:40:28.367691: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-11-02 08:40:30.315843: I tensorflow/stream_executor/cuda/cuda_dnn.cc:369] Loaded cuDNN version 8005\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 - 31s - loss: 3.5289 - accuracy: 0.7688 - val_loss: 1.0665 - val_accuracy: 0.9727\n",
      "\n",
      "Epoch 00001: val_loss improved from inf to 1.06655, saving model to mymodel.h5\n",
      "Epoch 2/10\n",
      "5/5 - 20s - loss: 0.2947 - accuracy: 1.0000 - val_loss: 0.2469 - val_accuracy: 0.9863\n",
      "\n",
      "Epoch 00002: val_loss improved from 1.06655 to 0.24688, saving model to mymodel.h5\n",
      "Epoch 3/10\n",
      "5/5 - 20s - loss: 0.1628 - accuracy: 0.9937 - val_loss: 0.3148 - val_accuracy: 0.9932\n",
      "\n",
      "Epoch 00003: val_loss did not improve from 0.24688\n",
      "Epoch 4/10\n",
      "5/5 - 19s - loss: 0.2395 - accuracy: 1.0000 - val_loss: 0.0581 - val_accuracy: 0.9961\n",
      "\n",
      "Epoch 00004: val_loss improved from 0.24688 to 0.05805, saving model to mymodel.h5\n",
      "Epoch 5/10\n",
      "5/5 - 19s - loss: 0.2848 - accuracy: 0.9875 - val_loss: 0.0482 - val_accuracy: 1.0000\n",
      "\n",
      "Epoch 00005: val_loss improved from 0.05805 to 0.04821, saving model to mymodel.h5\n",
      "Epoch 6/10\n",
      "5/5 - 19s - loss: 0.0507 - accuracy: 1.0000 - val_loss: 0.0250 - val_accuracy: 0.9980\n",
      "\n",
      "Epoch 00006: val_loss improved from 0.04821 to 0.02498, saving model to mymodel.h5\n",
      "Epoch 7/10\n",
      "5/5 - 19s - loss: 0.0757 - accuracy: 1.0000 - val_loss: 0.0163 - val_accuracy: 0.9990\n",
      "\n",
      "Epoch 00007: val_loss improved from 0.02498 to 0.01628, saving model to mymodel.h5\n",
      "Epoch 8/10\n",
      "5/5 - 19s - loss: 0.1164 - accuracy: 0.9924 - val_loss: 0.0027 - val_accuracy: 1.0000\n",
      "\n",
      "Epoch 00008: val_loss improved from 0.01628 to 0.00270, saving model to mymodel.h5\n",
      "Epoch 9/10\n",
      "5/5 - 19s - loss: 0.0014 - accuracy: 1.0000 - val_loss: 0.0038 - val_accuracy: 1.0000\n",
      "\n",
      "Epoch 00009: val_loss did not improve from 0.00270\n",
      "Epoch 10/10\n",
      "5/5 - 19s - loss: 6.4423e-05 - accuracy: 1.0000 - val_loss: 1.6174e-04 - val_accuracy: 1.0000\n",
      "\n",
      "Epoch 00010: val_loss improved from 0.00270 to 0.00016, saving model to mymodel.h5\n",
      "Training completed in time:  0:03:44.247128\n"
     ]
    }
   ],
   "source": [
    "model_history = model.fit_generator(\n",
    "train_set,\n",
    "validation_data = val_set,\n",
    "epochs = 10, \n",
    "steps_per_epoch = 5,\n",
    "validation_steps = 32,\n",
    "callbacks = callbacks, \n",
    "verbose = 2)\n",
    "\n",
    "duration = datetime.now() - start\n",
    "print(\"Training completed in time: \", duration)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b6b8b602",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:44:11.979639Z",
     "iopub.status.busy": "2022-11-02T08:44:11.979348Z",
     "iopub.status.idle": "2022-11-02T08:44:12.187414Z",
     "shell.execute_reply": "2022-11-02T08:44:12.186539Z"
    },
    "papermill": {
     "duration": 0.220092,
     "end_time": "2022-11-02T08:44:12.189563",
     "exception": false,
     "start_time": "2022-11-02T08:44:11.969471",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f2aa0273250>]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(model_history.history['loss'])\n",
    "plt.plot(model_history.history['val_loss'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1dc963f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-02T08:44:12.209286Z",
     "iopub.status.busy": "2022-11-02T08:44:12.208998Z",
     "iopub.status.idle": "2022-11-02T08:44:12.394854Z",
     "shell.execute_reply": "2022-11-02T08:44:12.393911Z"
    },
    "papermill": {
     "duration": 0.198022,
     "end_time": "2022-11-02T08:44:12.397083",
     "exception": false,
     "start_time": "2022-11-02T08:44:12.199061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f2aa01abf10>]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(model_history.history['accuracy'])\n",
    "plt.plot(model_history.history['val_accuracy'])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 248.273218,
   "end_time": "2022-11-02T08:44:16.128660",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-11-02T08:40:07.855442",
   "version": "2.3.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
